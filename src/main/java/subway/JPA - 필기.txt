정답 보다 어떤 선택지가 있는지 느끼는 경험

이런 상황에서는 어떻게? - 질문
이런 저런 이유로 이렇게 하겠습니다 - 답변

기존 방식은 엔티티에 대한 '신뢰성'이 없음 (원하는 데이터가 제대로 조회 되어 잘 들어 있는지)

// 영속성 컨텍스트 | 어플리케이션 레벨의 데이터베이스 라고 생각하면 됨
엔티티를 영구 저장하는 환경
엔티티 매니저로 엔티티를 저장하거나 조회하면 엔티티 매니저는, 영속성 컨텍스트에 엔티티를 보관하고 관리한다.
- 1차 캐시
- 동일성 보장
- 트랜잭션을 지원하는 쓰기 지연
- 변경 감지
- 지연 로딩

// 영속성 컨텍스트 - 엔티티의 생명주기.png
비영속 (인스턴스 생성 시)
영속 (save, find 시) | 영속성 컨텍스트과 관리하는 상태
준영속 (영속성 컨텍스트에 저장 되었다가 분리 된 상태, 트렌젝션이 닫힌 상태)
삭제 (삭제 시)

// 트랜잭션을 지원하는 쓰기 지연 - 트렌잭션을 커밋하는 순간, 영속성 컨텍스트를 DB에 반영
커밋 전에는 '1차 캐시',
'쓰기 지연 SQL 저장소'에
보관해 두었다가 커밋 순간 flush 됨





// Part 2 : 핵심 키워드
 - 방향: 단방향, 양방향이 있다. 방향은 객체 관계에만 존재하고 테이블 관계는 항상 양방향이다.
 - 다중성: 다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:M)
 - 연관 관계의 주인: 객체를 양방향 연관 관계로 만들면 연관 관계의 주인을 정해야 한다.
