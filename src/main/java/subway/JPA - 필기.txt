정답 보다 어떤 선택지가 있는지 느끼는 경험

이런 상황에서는 어떻게? - 질문
이런 저런 이유로 이렇게 하겠습니다 - 답변

기존 방식은 엔티티에 대한 '신뢰성'이 없음 (원하는 데이터가 제대로 조회 되어 잘 들어 있는지)

// 영속성 컨텍스트 | 어플리케이션 레벨의 데이터베이스 라고 생각하면 됨
엔티티를 영구 저장하는 환경
엔티티 매니저로 엔티티를 저장하거나 조회하면 엔티티 매니저는, 영속성 컨텍스트에 엔티티를 보관하고 관리한다.
- 1차 캐시
- 동일성 보장
- 트랜잭션을 지원하는 쓰기 지연
- 변경 감지
- 지연 로딩

// 영속성 컨텍스트 - 엔티티의 생명주기.png
비영속 (인스턴스 생성 시)
영속 (save, find 시) | 영속성 컨텍스트과 관리하는 상태
준영속 (영속성 컨텍스트에 저장 되었다가 분리 된 상태, 트렌젝션이 닫힌 상태)
삭제 (삭제 시)

// 트랜잭션을 지원하는 쓰기 지연 - 트렌잭션을 커밋하는 순간, 영속성 컨텍스트를 DB에 반영
커밋 전에는 '1차 캐시',
'쓰기 지연 SQL 저장소'에
보관해 두었다가 커밋 순간 flush 됨



// Part 2 : 핵심 키워드
 - 방향: 단방향, 양방향이 있다. 방향은 객체 관계에만 존재하고 테이블 관계는 항상 양방향이다.
 - 다중성: 다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:M)
 - 연관 관계의 주인(외래키 관리자): 객체를 양방향 연관 관계로 만들면 연관 관계의 주인을 정해야 한다. | 다대일, 일대다 관계에서는 항상 '다' 쪽이 외래키 관리자

// 양방향 관계를 맺게되면 연관관계의 주인을 지정해주어야 한다
// 일반적으로 외래키가 저장되는 다 측을 연관관계의 주인으로 지정



// 일대일 연관 관계 (양쪽 다 외래키를 가질 수 있기 때문에, 어느 곳에 외래키를 두어야 할지 고민 해야함)
 - 주 테이블 (내가 자주 쓰는 테이블, 참조를 가지고 있는 테이블을 주 테이블로 정한다)
 - 대상 테이블

// 일대일 양방향 연관 관계
 - 원투매니, 매니투원 때랑 똑같음

// 대상 테이블에 외래 키를 둔다면?
 - 테이블 관계를 일대일에서 일대다로 변경할 경우, 테이블 구조를 그대로 유지 할 수 있다는 장점이 있음 | 환승역 추가 시 등등
 - 단방향 연관 관계가 불가능 | 양방향 연관 관계만 가능



// 다대다 연관 관계
 - 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없다. | 3개가 필요
 - 보통 다대다 관계를 일대다, 다대일 관계로 풀어내는 '연결 테이블'(연계만 표현한 테이블)을 사용한다.
 - 연결 테이블에 필드가 추가되면 더는 사용할 수 없다.
